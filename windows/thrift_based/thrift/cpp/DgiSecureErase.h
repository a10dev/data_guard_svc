/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DgiSecureErase_H
#define DgiSecureErase_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dgiSecureErase_types.h"

namespace dgi {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DgiSecureEraseIf {
 public:
  virtual ~DgiSecureEraseIf() {}
  virtual void eraseFiles( ::dgi::AsyncResponse& _return, const  ::dgi::EraseList& _toErase) = 0;
  virtual void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId) = 0;
  virtual void getEraseState( ::dgi::EraseResponse& _return, const  ::dgi::AsyncId _asyncId) = 0;
  virtual void eraseFile( ::dgi::DgiResult& _return, const std::string& _filepath) = 0;
};

class DgiSecureEraseIfFactory {
 public:
  typedef DgiSecureEraseIf Handler;

  virtual ~DgiSecureEraseIfFactory() {}

  virtual DgiSecureEraseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DgiSecureEraseIf* /* handler */) = 0;
};

class DgiSecureEraseIfSingletonFactory : virtual public DgiSecureEraseIfFactory {
 public:
  DgiSecureEraseIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf>& iface) : iface_(iface) {}
  virtual ~DgiSecureEraseIfSingletonFactory() {}

  virtual DgiSecureEraseIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DgiSecureEraseIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> iface_;
};

class DgiSecureEraseNull : virtual public DgiSecureEraseIf {
 public:
  virtual ~DgiSecureEraseNull() {}
  void eraseFiles( ::dgi::AsyncResponse& /* _return */, const  ::dgi::EraseList& /* _toErase */) {
    return;
  }
  void getState( ::dgi::DgiResult& /* _return */, const  ::dgi::AsyncId /* _asyncId */) {
    return;
  }
  void getEraseState( ::dgi::EraseResponse& /* _return */, const  ::dgi::AsyncId /* _asyncId */) {
    return;
  }
  void eraseFile( ::dgi::DgiResult& /* _return */, const std::string& /* _filepath */) {
    return;
  }
};

typedef struct _DgiSecureErase_eraseFiles_args__isset {
  _DgiSecureErase_eraseFiles_args__isset() : _toErase(false) {}
  bool _toErase :1;
} _DgiSecureErase_eraseFiles_args__isset;

class DgiSecureErase_eraseFiles_args {
 public:

  DgiSecureErase_eraseFiles_args(const DgiSecureErase_eraseFiles_args&);
  DgiSecureErase_eraseFiles_args& operator=(const DgiSecureErase_eraseFiles_args&);
  DgiSecureErase_eraseFiles_args() {
  }

  virtual ~DgiSecureErase_eraseFiles_args() throw();
   ::dgi::EraseList _toErase;

  _DgiSecureErase_eraseFiles_args__isset __isset;

  void __set__toErase(const  ::dgi::EraseList& val);

  bool operator == (const DgiSecureErase_eraseFiles_args & rhs) const
  {
    if (!(_toErase == rhs._toErase))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_eraseFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_eraseFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiSecureErase_eraseFiles_pargs {
 public:


  virtual ~DgiSecureErase_eraseFiles_pargs() throw();
  const  ::dgi::EraseList* _toErase;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_eraseFiles_result__isset {
  _DgiSecureErase_eraseFiles_result__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_eraseFiles_result__isset;

class DgiSecureErase_eraseFiles_result {
 public:

  DgiSecureErase_eraseFiles_result(const DgiSecureErase_eraseFiles_result&);
  DgiSecureErase_eraseFiles_result& operator=(const DgiSecureErase_eraseFiles_result&);
  DgiSecureErase_eraseFiles_result() {
  }

  virtual ~DgiSecureErase_eraseFiles_result() throw();
   ::dgi::AsyncResponse success;

  _DgiSecureErase_eraseFiles_result__isset __isset;

  void __set_success(const  ::dgi::AsyncResponse& val);

  bool operator == (const DgiSecureErase_eraseFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_eraseFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_eraseFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_eraseFiles_presult__isset {
  _DgiSecureErase_eraseFiles_presult__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_eraseFiles_presult__isset;

class DgiSecureErase_eraseFiles_presult {
 public:


  virtual ~DgiSecureErase_eraseFiles_presult() throw();
   ::dgi::AsyncResponse* success;

  _DgiSecureErase_eraseFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiSecureErase_getState_args__isset {
  _DgiSecureErase_getState_args__isset() : _asyncId(false) {}
  bool _asyncId :1;
} _DgiSecureErase_getState_args__isset;

class DgiSecureErase_getState_args {
 public:

  DgiSecureErase_getState_args(const DgiSecureErase_getState_args&);
  DgiSecureErase_getState_args& operator=(const DgiSecureErase_getState_args&);
  DgiSecureErase_getState_args() : _asyncId(0) {
  }

  virtual ~DgiSecureErase_getState_args() throw();
   ::dgi::AsyncId _asyncId;

  _DgiSecureErase_getState_args__isset __isset;

  void __set__asyncId(const  ::dgi::AsyncId val);

  bool operator == (const DgiSecureErase_getState_args & rhs) const
  {
    if (!(_asyncId == rhs._asyncId))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiSecureErase_getState_pargs {
 public:


  virtual ~DgiSecureErase_getState_pargs() throw();
  const  ::dgi::AsyncId* _asyncId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_getState_result__isset {
  _DgiSecureErase_getState_result__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_getState_result__isset;

class DgiSecureErase_getState_result {
 public:

  DgiSecureErase_getState_result(const DgiSecureErase_getState_result&);
  DgiSecureErase_getState_result& operator=(const DgiSecureErase_getState_result&);
  DgiSecureErase_getState_result() {
  }

  virtual ~DgiSecureErase_getState_result() throw();
   ::dgi::DgiResult success;

  _DgiSecureErase_getState_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiSecureErase_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_getState_presult__isset {
  _DgiSecureErase_getState_presult__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_getState_presult__isset;

class DgiSecureErase_getState_presult {
 public:


  virtual ~DgiSecureErase_getState_presult() throw();
   ::dgi::DgiResult* success;

  _DgiSecureErase_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiSecureErase_getEraseState_args__isset {
  _DgiSecureErase_getEraseState_args__isset() : _asyncId(false) {}
  bool _asyncId :1;
} _DgiSecureErase_getEraseState_args__isset;

class DgiSecureErase_getEraseState_args {
 public:

  DgiSecureErase_getEraseState_args(const DgiSecureErase_getEraseState_args&);
  DgiSecureErase_getEraseState_args& operator=(const DgiSecureErase_getEraseState_args&);
  DgiSecureErase_getEraseState_args() : _asyncId(0) {
  }

  virtual ~DgiSecureErase_getEraseState_args() throw();
   ::dgi::AsyncId _asyncId;

  _DgiSecureErase_getEraseState_args__isset __isset;

  void __set__asyncId(const  ::dgi::AsyncId val);

  bool operator == (const DgiSecureErase_getEraseState_args & rhs) const
  {
    if (!(_asyncId == rhs._asyncId))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_getEraseState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_getEraseState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiSecureErase_getEraseState_pargs {
 public:


  virtual ~DgiSecureErase_getEraseState_pargs() throw();
  const  ::dgi::AsyncId* _asyncId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_getEraseState_result__isset {
  _DgiSecureErase_getEraseState_result__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_getEraseState_result__isset;

class DgiSecureErase_getEraseState_result {
 public:

  DgiSecureErase_getEraseState_result(const DgiSecureErase_getEraseState_result&);
  DgiSecureErase_getEraseState_result& operator=(const DgiSecureErase_getEraseState_result&);
  DgiSecureErase_getEraseState_result() {
  }

  virtual ~DgiSecureErase_getEraseState_result() throw();
   ::dgi::EraseResponse success;

  _DgiSecureErase_getEraseState_result__isset __isset;

  void __set_success(const  ::dgi::EraseResponse& val);

  bool operator == (const DgiSecureErase_getEraseState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_getEraseState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_getEraseState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_getEraseState_presult__isset {
  _DgiSecureErase_getEraseState_presult__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_getEraseState_presult__isset;

class DgiSecureErase_getEraseState_presult {
 public:


  virtual ~DgiSecureErase_getEraseState_presult() throw();
   ::dgi::EraseResponse* success;

  _DgiSecureErase_getEraseState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiSecureErase_eraseFile_args__isset {
  _DgiSecureErase_eraseFile_args__isset() : _filepath(false) {}
  bool _filepath :1;
} _DgiSecureErase_eraseFile_args__isset;

class DgiSecureErase_eraseFile_args {
 public:

  DgiSecureErase_eraseFile_args(const DgiSecureErase_eraseFile_args&);
  DgiSecureErase_eraseFile_args& operator=(const DgiSecureErase_eraseFile_args&);
  DgiSecureErase_eraseFile_args() : _filepath() {
  }

  virtual ~DgiSecureErase_eraseFile_args() throw();
  std::string _filepath;

  _DgiSecureErase_eraseFile_args__isset __isset;

  void __set__filepath(const std::string& val);

  bool operator == (const DgiSecureErase_eraseFile_args & rhs) const
  {
    if (!(_filepath == rhs._filepath))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_eraseFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_eraseFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiSecureErase_eraseFile_pargs {
 public:


  virtual ~DgiSecureErase_eraseFile_pargs() throw();
  const std::string* _filepath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_eraseFile_result__isset {
  _DgiSecureErase_eraseFile_result__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_eraseFile_result__isset;

class DgiSecureErase_eraseFile_result {
 public:

  DgiSecureErase_eraseFile_result(const DgiSecureErase_eraseFile_result&);
  DgiSecureErase_eraseFile_result& operator=(const DgiSecureErase_eraseFile_result&);
  DgiSecureErase_eraseFile_result() {
  }

  virtual ~DgiSecureErase_eraseFile_result() throw();
   ::dgi::DgiResult success;

  _DgiSecureErase_eraseFile_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiSecureErase_eraseFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiSecureErase_eraseFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiSecureErase_eraseFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiSecureErase_eraseFile_presult__isset {
  _DgiSecureErase_eraseFile_presult__isset() : success(false) {}
  bool success :1;
} _DgiSecureErase_eraseFile_presult__isset;

class DgiSecureErase_eraseFile_presult {
 public:


  virtual ~DgiSecureErase_eraseFile_presult() throw();
   ::dgi::DgiResult* success;

  _DgiSecureErase_eraseFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DgiSecureEraseClient : virtual public DgiSecureEraseIf {
 public:
  DgiSecureEraseClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiSecureEraseClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void eraseFiles( ::dgi::AsyncResponse& _return, const  ::dgi::EraseList& _toErase);
  void send_eraseFiles(const  ::dgi::EraseList& _toErase);
  void recv_eraseFiles( ::dgi::AsyncResponse& _return);
  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId);
  void send_getState(const  ::dgi::AsyncId _asyncId);
  void recv_getState( ::dgi::DgiResult& _return);
  void getEraseState( ::dgi::EraseResponse& _return, const  ::dgi::AsyncId _asyncId);
  void send_getEraseState(const  ::dgi::AsyncId _asyncId);
  void recv_getEraseState( ::dgi::EraseResponse& _return);
  void eraseFile( ::dgi::DgiResult& _return, const std::string& _filepath);
  void send_eraseFile(const std::string& _filepath);
  void recv_eraseFile( ::dgi::DgiResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DgiSecureEraseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DgiSecureEraseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_eraseFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEraseState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_eraseFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DgiSecureEraseProcessor(::apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> iface) :
    iface_(iface) {
    processMap_["eraseFiles"] = &DgiSecureEraseProcessor::process_eraseFiles;
    processMap_["getState"] = &DgiSecureEraseProcessor::process_getState;
    processMap_["getEraseState"] = &DgiSecureEraseProcessor::process_getEraseState;
    processMap_["eraseFile"] = &DgiSecureEraseProcessor::process_eraseFile;
  }

  virtual ~DgiSecureEraseProcessor() {}
};

class DgiSecureEraseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DgiSecureEraseProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DgiSecureEraseIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DgiSecureEraseIfFactory > handlerFactory_;
};

class DgiSecureEraseMultiface : virtual public DgiSecureEraseIf {
 public:
  DgiSecureEraseMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DgiSecureEraseMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> > ifaces_;
  DgiSecureEraseMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DgiSecureEraseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void eraseFiles( ::dgi::AsyncResponse& _return, const  ::dgi::EraseList& _toErase) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eraseFiles(_return, _toErase);
    }
    ifaces_[i]->eraseFiles(_return, _toErase);
    return;
  }

  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return, _asyncId);
    }
    ifaces_[i]->getState(_return, _asyncId);
    return;
  }

  void getEraseState( ::dgi::EraseResponse& _return, const  ::dgi::AsyncId _asyncId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEraseState(_return, _asyncId);
    }
    ifaces_[i]->getEraseState(_return, _asyncId);
    return;
  }

  void eraseFile( ::dgi::DgiResult& _return, const std::string& _filepath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eraseFile(_return, _filepath);
    }
    ifaces_[i]->eraseFile(_return, _filepath);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DgiSecureEraseConcurrentClient : virtual public DgiSecureEraseIf {
 public:
  DgiSecureEraseConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiSecureEraseConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void eraseFiles( ::dgi::AsyncResponse& _return, const  ::dgi::EraseList& _toErase);
  int32_t send_eraseFiles(const  ::dgi::EraseList& _toErase);
  void recv_eraseFiles( ::dgi::AsyncResponse& _return, const int32_t seqid);
  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId);
  int32_t send_getState(const  ::dgi::AsyncId _asyncId);
  void recv_getState( ::dgi::DgiResult& _return, const int32_t seqid);
  void getEraseState( ::dgi::EraseResponse& _return, const  ::dgi::AsyncId _asyncId);
  int32_t send_getEraseState(const  ::dgi::AsyncId _asyncId);
  void recv_getEraseState( ::dgi::EraseResponse& _return, const int32_t seqid);
  void eraseFile( ::dgi::DgiResult& _return, const std::string& _filepath);
  int32_t send_eraseFile(const std::string& _filepath);
  void recv_eraseFile( ::dgi::DgiResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
