/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DgiEncryption_H
#define DgiEncryption_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dgiEncryption_types.h"

namespace dgi {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DgiEncryptionIf {
 public:
  virtual ~DgiEncryptionIf() {}
  virtual void isFileEncoded( ::dgi::BoolResponse& _return, const std::string& _filepath) = 0;
  virtual void getFileInfo( ::dgi::ResponseFileInfo& _return, const std::string& _filepath) = 0;
  virtual void encryptFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestEncryptFile& _file) = 0;
  virtual void encryptFile( ::dgi::DgiResult& _return, const  ::dgi::RequestEncryptFile& _file) = 0;
  virtual void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId) = 0;
  virtual void decodeFile( ::dgi::ResponseDecodeFile& _return, const  ::dgi::RequestDecodeFile& _file) = 0;
  virtual void decodeFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestDecodeFile& _file) = 0;
};

class DgiEncryptionIfFactory {
 public:
  typedef DgiEncryptionIf Handler;

  virtual ~DgiEncryptionIfFactory() {}

  virtual DgiEncryptionIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DgiEncryptionIf* /* handler */) = 0;
};

class DgiEncryptionIfSingletonFactory : virtual public DgiEncryptionIfFactory {
 public:
  DgiEncryptionIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf>& iface) : iface_(iface) {}
  virtual ~DgiEncryptionIfSingletonFactory() {}

  virtual DgiEncryptionIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DgiEncryptionIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> iface_;
};

class DgiEncryptionNull : virtual public DgiEncryptionIf {
 public:
  virtual ~DgiEncryptionNull() {}
  void isFileEncoded( ::dgi::BoolResponse& /* _return */, const std::string& /* _filepath */) {
    return;
  }
  void getFileInfo( ::dgi::ResponseFileInfo& /* _return */, const std::string& /* _filepath */) {
    return;
  }
  void encryptFileAsync( ::dgi::AsyncResponse& /* _return */, const  ::dgi::RequestEncryptFile& /* _file */) {
    return;
  }
  void encryptFile( ::dgi::DgiResult& /* _return */, const  ::dgi::RequestEncryptFile& /* _file */) {
    return;
  }
  void getState( ::dgi::DgiResult& /* _return */, const  ::dgi::AsyncId /* _asyncId */) {
    return;
  }
  void decodeFile( ::dgi::ResponseDecodeFile& /* _return */, const  ::dgi::RequestDecodeFile& /* _file */) {
    return;
  }
  void decodeFileAsync( ::dgi::AsyncResponse& /* _return */, const  ::dgi::RequestDecodeFile& /* _file */) {
    return;
  }
};

typedef struct _DgiEncryption_isFileEncoded_args__isset {
  _DgiEncryption_isFileEncoded_args__isset() : _filepath(false) {}
  bool _filepath :1;
} _DgiEncryption_isFileEncoded_args__isset;

class DgiEncryption_isFileEncoded_args {
 public:

  DgiEncryption_isFileEncoded_args(const DgiEncryption_isFileEncoded_args&);
  DgiEncryption_isFileEncoded_args& operator=(const DgiEncryption_isFileEncoded_args&);
  DgiEncryption_isFileEncoded_args() : _filepath() {
  }

  virtual ~DgiEncryption_isFileEncoded_args() throw();
  std::string _filepath;

  _DgiEncryption_isFileEncoded_args__isset __isset;

  void __set__filepath(const std::string& val);

  bool operator == (const DgiEncryption_isFileEncoded_args & rhs) const
  {
    if (!(_filepath == rhs._filepath))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_isFileEncoded_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_isFileEncoded_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_isFileEncoded_pargs {
 public:


  virtual ~DgiEncryption_isFileEncoded_pargs() throw();
  const std::string* _filepath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_isFileEncoded_result__isset {
  _DgiEncryption_isFileEncoded_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_isFileEncoded_result__isset;

class DgiEncryption_isFileEncoded_result {
 public:

  DgiEncryption_isFileEncoded_result(const DgiEncryption_isFileEncoded_result&);
  DgiEncryption_isFileEncoded_result& operator=(const DgiEncryption_isFileEncoded_result&);
  DgiEncryption_isFileEncoded_result() {
  }

  virtual ~DgiEncryption_isFileEncoded_result() throw();
   ::dgi::BoolResponse success;

  _DgiEncryption_isFileEncoded_result__isset __isset;

  void __set_success(const  ::dgi::BoolResponse& val);

  bool operator == (const DgiEncryption_isFileEncoded_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_isFileEncoded_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_isFileEncoded_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_isFileEncoded_presult__isset {
  _DgiEncryption_isFileEncoded_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_isFileEncoded_presult__isset;

class DgiEncryption_isFileEncoded_presult {
 public:


  virtual ~DgiEncryption_isFileEncoded_presult() throw();
   ::dgi::BoolResponse* success;

  _DgiEncryption_isFileEncoded_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_getFileInfo_args__isset {
  _DgiEncryption_getFileInfo_args__isset() : _filepath(false) {}
  bool _filepath :1;
} _DgiEncryption_getFileInfo_args__isset;

class DgiEncryption_getFileInfo_args {
 public:

  DgiEncryption_getFileInfo_args(const DgiEncryption_getFileInfo_args&);
  DgiEncryption_getFileInfo_args& operator=(const DgiEncryption_getFileInfo_args&);
  DgiEncryption_getFileInfo_args() : _filepath() {
  }

  virtual ~DgiEncryption_getFileInfo_args() throw();
  std::string _filepath;

  _DgiEncryption_getFileInfo_args__isset __isset;

  void __set__filepath(const std::string& val);

  bool operator == (const DgiEncryption_getFileInfo_args & rhs) const
  {
    if (!(_filepath == rhs._filepath))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_getFileInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_getFileInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_getFileInfo_pargs {
 public:


  virtual ~DgiEncryption_getFileInfo_pargs() throw();
  const std::string* _filepath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_getFileInfo_result__isset {
  _DgiEncryption_getFileInfo_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_getFileInfo_result__isset;

class DgiEncryption_getFileInfo_result {
 public:

  DgiEncryption_getFileInfo_result(const DgiEncryption_getFileInfo_result&);
  DgiEncryption_getFileInfo_result& operator=(const DgiEncryption_getFileInfo_result&);
  DgiEncryption_getFileInfo_result() {
  }

  virtual ~DgiEncryption_getFileInfo_result() throw();
   ::dgi::ResponseFileInfo success;

  _DgiEncryption_getFileInfo_result__isset __isset;

  void __set_success(const  ::dgi::ResponseFileInfo& val);

  bool operator == (const DgiEncryption_getFileInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_getFileInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_getFileInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_getFileInfo_presult__isset {
  _DgiEncryption_getFileInfo_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_getFileInfo_presult__isset;

class DgiEncryption_getFileInfo_presult {
 public:


  virtual ~DgiEncryption_getFileInfo_presult() throw();
   ::dgi::ResponseFileInfo* success;

  _DgiEncryption_getFileInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_encryptFileAsync_args__isset {
  _DgiEncryption_encryptFileAsync_args__isset() : _file(false) {}
  bool _file :1;
} _DgiEncryption_encryptFileAsync_args__isset;

class DgiEncryption_encryptFileAsync_args {
 public:

  DgiEncryption_encryptFileAsync_args(const DgiEncryption_encryptFileAsync_args&);
  DgiEncryption_encryptFileAsync_args& operator=(const DgiEncryption_encryptFileAsync_args&);
  DgiEncryption_encryptFileAsync_args() {
  }

  virtual ~DgiEncryption_encryptFileAsync_args() throw();
   ::dgi::RequestEncryptFile _file;

  _DgiEncryption_encryptFileAsync_args__isset __isset;

  void __set__file(const  ::dgi::RequestEncryptFile& val);

  bool operator == (const DgiEncryption_encryptFileAsync_args & rhs) const
  {
    if (!(_file == rhs._file))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_encryptFileAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_encryptFileAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_encryptFileAsync_pargs {
 public:


  virtual ~DgiEncryption_encryptFileAsync_pargs() throw();
  const  ::dgi::RequestEncryptFile* _file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_encryptFileAsync_result__isset {
  _DgiEncryption_encryptFileAsync_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_encryptFileAsync_result__isset;

class DgiEncryption_encryptFileAsync_result {
 public:

  DgiEncryption_encryptFileAsync_result(const DgiEncryption_encryptFileAsync_result&);
  DgiEncryption_encryptFileAsync_result& operator=(const DgiEncryption_encryptFileAsync_result&);
  DgiEncryption_encryptFileAsync_result() {
  }

  virtual ~DgiEncryption_encryptFileAsync_result() throw();
   ::dgi::AsyncResponse success;

  _DgiEncryption_encryptFileAsync_result__isset __isset;

  void __set_success(const  ::dgi::AsyncResponse& val);

  bool operator == (const DgiEncryption_encryptFileAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_encryptFileAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_encryptFileAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_encryptFileAsync_presult__isset {
  _DgiEncryption_encryptFileAsync_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_encryptFileAsync_presult__isset;

class DgiEncryption_encryptFileAsync_presult {
 public:


  virtual ~DgiEncryption_encryptFileAsync_presult() throw();
   ::dgi::AsyncResponse* success;

  _DgiEncryption_encryptFileAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_encryptFile_args__isset {
  _DgiEncryption_encryptFile_args__isset() : _file(false) {}
  bool _file :1;
} _DgiEncryption_encryptFile_args__isset;

class DgiEncryption_encryptFile_args {
 public:

  DgiEncryption_encryptFile_args(const DgiEncryption_encryptFile_args&);
  DgiEncryption_encryptFile_args& operator=(const DgiEncryption_encryptFile_args&);
  DgiEncryption_encryptFile_args() {
  }

  virtual ~DgiEncryption_encryptFile_args() throw();
   ::dgi::RequestEncryptFile _file;

  _DgiEncryption_encryptFile_args__isset __isset;

  void __set__file(const  ::dgi::RequestEncryptFile& val);

  bool operator == (const DgiEncryption_encryptFile_args & rhs) const
  {
    if (!(_file == rhs._file))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_encryptFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_encryptFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_encryptFile_pargs {
 public:


  virtual ~DgiEncryption_encryptFile_pargs() throw();
  const  ::dgi::RequestEncryptFile* _file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_encryptFile_result__isset {
  _DgiEncryption_encryptFile_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_encryptFile_result__isset;

class DgiEncryption_encryptFile_result {
 public:

  DgiEncryption_encryptFile_result(const DgiEncryption_encryptFile_result&);
  DgiEncryption_encryptFile_result& operator=(const DgiEncryption_encryptFile_result&);
  DgiEncryption_encryptFile_result() {
  }

  virtual ~DgiEncryption_encryptFile_result() throw();
   ::dgi::DgiResult success;

  _DgiEncryption_encryptFile_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiEncryption_encryptFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_encryptFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_encryptFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_encryptFile_presult__isset {
  _DgiEncryption_encryptFile_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_encryptFile_presult__isset;

class DgiEncryption_encryptFile_presult {
 public:


  virtual ~DgiEncryption_encryptFile_presult() throw();
   ::dgi::DgiResult* success;

  _DgiEncryption_encryptFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_getState_args__isset {
  _DgiEncryption_getState_args__isset() : _asyncId(false) {}
  bool _asyncId :1;
} _DgiEncryption_getState_args__isset;

class DgiEncryption_getState_args {
 public:

  DgiEncryption_getState_args(const DgiEncryption_getState_args&);
  DgiEncryption_getState_args& operator=(const DgiEncryption_getState_args&);
  DgiEncryption_getState_args() : _asyncId(0) {
  }

  virtual ~DgiEncryption_getState_args() throw();
   ::dgi::AsyncId _asyncId;

  _DgiEncryption_getState_args__isset __isset;

  void __set__asyncId(const  ::dgi::AsyncId val);

  bool operator == (const DgiEncryption_getState_args & rhs) const
  {
    if (!(_asyncId == rhs._asyncId))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_getState_pargs {
 public:


  virtual ~DgiEncryption_getState_pargs() throw();
  const  ::dgi::AsyncId* _asyncId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_getState_result__isset {
  _DgiEncryption_getState_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_getState_result__isset;

class DgiEncryption_getState_result {
 public:

  DgiEncryption_getState_result(const DgiEncryption_getState_result&);
  DgiEncryption_getState_result& operator=(const DgiEncryption_getState_result&);
  DgiEncryption_getState_result() {
  }

  virtual ~DgiEncryption_getState_result() throw();
   ::dgi::DgiResult success;

  _DgiEncryption_getState_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiEncryption_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_getState_presult__isset {
  _DgiEncryption_getState_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_getState_presult__isset;

class DgiEncryption_getState_presult {
 public:


  virtual ~DgiEncryption_getState_presult() throw();
   ::dgi::DgiResult* success;

  _DgiEncryption_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_decodeFile_args__isset {
  _DgiEncryption_decodeFile_args__isset() : _file(false) {}
  bool _file :1;
} _DgiEncryption_decodeFile_args__isset;

class DgiEncryption_decodeFile_args {
 public:

  DgiEncryption_decodeFile_args(const DgiEncryption_decodeFile_args&);
  DgiEncryption_decodeFile_args& operator=(const DgiEncryption_decodeFile_args&);
  DgiEncryption_decodeFile_args() {
  }

  virtual ~DgiEncryption_decodeFile_args() throw();
   ::dgi::RequestDecodeFile _file;

  _DgiEncryption_decodeFile_args__isset __isset;

  void __set__file(const  ::dgi::RequestDecodeFile& val);

  bool operator == (const DgiEncryption_decodeFile_args & rhs) const
  {
    if (!(_file == rhs._file))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_decodeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_decodeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_decodeFile_pargs {
 public:


  virtual ~DgiEncryption_decodeFile_pargs() throw();
  const  ::dgi::RequestDecodeFile* _file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_decodeFile_result__isset {
  _DgiEncryption_decodeFile_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_decodeFile_result__isset;

class DgiEncryption_decodeFile_result {
 public:

  DgiEncryption_decodeFile_result(const DgiEncryption_decodeFile_result&);
  DgiEncryption_decodeFile_result& operator=(const DgiEncryption_decodeFile_result&);
  DgiEncryption_decodeFile_result() {
  }

  virtual ~DgiEncryption_decodeFile_result() throw();
   ::dgi::ResponseDecodeFile success;

  _DgiEncryption_decodeFile_result__isset __isset;

  void __set_success(const  ::dgi::ResponseDecodeFile& val);

  bool operator == (const DgiEncryption_decodeFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_decodeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_decodeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_decodeFile_presult__isset {
  _DgiEncryption_decodeFile_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_decodeFile_presult__isset;

class DgiEncryption_decodeFile_presult {
 public:


  virtual ~DgiEncryption_decodeFile_presult() throw();
   ::dgi::ResponseDecodeFile* success;

  _DgiEncryption_decodeFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiEncryption_decodeFileAsync_args__isset {
  _DgiEncryption_decodeFileAsync_args__isset() : _file(false) {}
  bool _file :1;
} _DgiEncryption_decodeFileAsync_args__isset;

class DgiEncryption_decodeFileAsync_args {
 public:

  DgiEncryption_decodeFileAsync_args(const DgiEncryption_decodeFileAsync_args&);
  DgiEncryption_decodeFileAsync_args& operator=(const DgiEncryption_decodeFileAsync_args&);
  DgiEncryption_decodeFileAsync_args() {
  }

  virtual ~DgiEncryption_decodeFileAsync_args() throw();
   ::dgi::RequestDecodeFile _file;

  _DgiEncryption_decodeFileAsync_args__isset __isset;

  void __set__file(const  ::dgi::RequestDecodeFile& val);

  bool operator == (const DgiEncryption_decodeFileAsync_args & rhs) const
  {
    if (!(_file == rhs._file))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_decodeFileAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_decodeFileAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiEncryption_decodeFileAsync_pargs {
 public:


  virtual ~DgiEncryption_decodeFileAsync_pargs() throw();
  const  ::dgi::RequestDecodeFile* _file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_decodeFileAsync_result__isset {
  _DgiEncryption_decodeFileAsync_result__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_decodeFileAsync_result__isset;

class DgiEncryption_decodeFileAsync_result {
 public:

  DgiEncryption_decodeFileAsync_result(const DgiEncryption_decodeFileAsync_result&);
  DgiEncryption_decodeFileAsync_result& operator=(const DgiEncryption_decodeFileAsync_result&);
  DgiEncryption_decodeFileAsync_result() {
  }

  virtual ~DgiEncryption_decodeFileAsync_result() throw();
   ::dgi::AsyncResponse success;

  _DgiEncryption_decodeFileAsync_result__isset __isset;

  void __set_success(const  ::dgi::AsyncResponse& val);

  bool operator == (const DgiEncryption_decodeFileAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiEncryption_decodeFileAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiEncryption_decodeFileAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiEncryption_decodeFileAsync_presult__isset {
  _DgiEncryption_decodeFileAsync_presult__isset() : success(false) {}
  bool success :1;
} _DgiEncryption_decodeFileAsync_presult__isset;

class DgiEncryption_decodeFileAsync_presult {
 public:


  virtual ~DgiEncryption_decodeFileAsync_presult() throw();
   ::dgi::AsyncResponse* success;

  _DgiEncryption_decodeFileAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DgiEncryptionClient : virtual public DgiEncryptionIf {
 public:
  DgiEncryptionClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiEncryptionClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void isFileEncoded( ::dgi::BoolResponse& _return, const std::string& _filepath);
  void send_isFileEncoded(const std::string& _filepath);
  void recv_isFileEncoded( ::dgi::BoolResponse& _return);
  void getFileInfo( ::dgi::ResponseFileInfo& _return, const std::string& _filepath);
  void send_getFileInfo(const std::string& _filepath);
  void recv_getFileInfo( ::dgi::ResponseFileInfo& _return);
  void encryptFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestEncryptFile& _file);
  void send_encryptFileAsync(const  ::dgi::RequestEncryptFile& _file);
  void recv_encryptFileAsync( ::dgi::AsyncResponse& _return);
  void encryptFile( ::dgi::DgiResult& _return, const  ::dgi::RequestEncryptFile& _file);
  void send_encryptFile(const  ::dgi::RequestEncryptFile& _file);
  void recv_encryptFile( ::dgi::DgiResult& _return);
  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId);
  void send_getState(const  ::dgi::AsyncId _asyncId);
  void recv_getState( ::dgi::DgiResult& _return);
  void decodeFile( ::dgi::ResponseDecodeFile& _return, const  ::dgi::RequestDecodeFile& _file);
  void send_decodeFile(const  ::dgi::RequestDecodeFile& _file);
  void recv_decodeFile( ::dgi::ResponseDecodeFile& _return);
  void decodeFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestDecodeFile& _file);
  void send_decodeFileAsync(const  ::dgi::RequestDecodeFile& _file);
  void recv_decodeFileAsync( ::dgi::AsyncResponse& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DgiEncryptionProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DgiEncryptionProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_isFileEncoded(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_encryptFileAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_encryptFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decodeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decodeFileAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DgiEncryptionProcessor(::apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> iface) :
    iface_(iface) {
    processMap_["isFileEncoded"] = &DgiEncryptionProcessor::process_isFileEncoded;
    processMap_["getFileInfo"] = &DgiEncryptionProcessor::process_getFileInfo;
    processMap_["encryptFileAsync"] = &DgiEncryptionProcessor::process_encryptFileAsync;
    processMap_["encryptFile"] = &DgiEncryptionProcessor::process_encryptFile;
    processMap_["getState"] = &DgiEncryptionProcessor::process_getState;
    processMap_["decodeFile"] = &DgiEncryptionProcessor::process_decodeFile;
    processMap_["decodeFileAsync"] = &DgiEncryptionProcessor::process_decodeFileAsync;
  }

  virtual ~DgiEncryptionProcessor() {}
};

class DgiEncryptionProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DgiEncryptionProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DgiEncryptionIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DgiEncryptionIfFactory > handlerFactory_;
};

class DgiEncryptionMultiface : virtual public DgiEncryptionIf {
 public:
  DgiEncryptionMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DgiEncryptionMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> > ifaces_;
  DgiEncryptionMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DgiEncryptionIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void isFileEncoded( ::dgi::BoolResponse& _return, const std::string& _filepath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isFileEncoded(_return, _filepath);
    }
    ifaces_[i]->isFileEncoded(_return, _filepath);
    return;
  }

  void getFileInfo( ::dgi::ResponseFileInfo& _return, const std::string& _filepath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFileInfo(_return, _filepath);
    }
    ifaces_[i]->getFileInfo(_return, _filepath);
    return;
  }

  void encryptFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestEncryptFile& _file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->encryptFileAsync(_return, _file);
    }
    ifaces_[i]->encryptFileAsync(_return, _file);
    return;
  }

  void encryptFile( ::dgi::DgiResult& _return, const  ::dgi::RequestEncryptFile& _file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->encryptFile(_return, _file);
    }
    ifaces_[i]->encryptFile(_return, _file);
    return;
  }

  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return, _asyncId);
    }
    ifaces_[i]->getState(_return, _asyncId);
    return;
  }

  void decodeFile( ::dgi::ResponseDecodeFile& _return, const  ::dgi::RequestDecodeFile& _file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decodeFile(_return, _file);
    }
    ifaces_[i]->decodeFile(_return, _file);
    return;
  }

  void decodeFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestDecodeFile& _file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decodeFileAsync(_return, _file);
    }
    ifaces_[i]->decodeFileAsync(_return, _file);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DgiEncryptionConcurrentClient : virtual public DgiEncryptionIf {
 public:
  DgiEncryptionConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiEncryptionConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void isFileEncoded( ::dgi::BoolResponse& _return, const std::string& _filepath);
  int32_t send_isFileEncoded(const std::string& _filepath);
  void recv_isFileEncoded( ::dgi::BoolResponse& _return, const int32_t seqid);
  void getFileInfo( ::dgi::ResponseFileInfo& _return, const std::string& _filepath);
  int32_t send_getFileInfo(const std::string& _filepath);
  void recv_getFileInfo( ::dgi::ResponseFileInfo& _return, const int32_t seqid);
  void encryptFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestEncryptFile& _file);
  int32_t send_encryptFileAsync(const  ::dgi::RequestEncryptFile& _file);
  void recv_encryptFileAsync( ::dgi::AsyncResponse& _return, const int32_t seqid);
  void encryptFile( ::dgi::DgiResult& _return, const  ::dgi::RequestEncryptFile& _file);
  int32_t send_encryptFile(const  ::dgi::RequestEncryptFile& _file);
  void recv_encryptFile( ::dgi::DgiResult& _return, const int32_t seqid);
  void getState( ::dgi::DgiResult& _return, const  ::dgi::AsyncId _asyncId);
  int32_t send_getState(const  ::dgi::AsyncId _asyncId);
  void recv_getState( ::dgi::DgiResult& _return, const int32_t seqid);
  void decodeFile( ::dgi::ResponseDecodeFile& _return, const  ::dgi::RequestDecodeFile& _file);
  int32_t send_decodeFile(const  ::dgi::RequestDecodeFile& _file);
  void recv_decodeFile( ::dgi::ResponseDecodeFile& _return, const int32_t seqid);
  void decodeFileAsync( ::dgi::AsyncResponse& _return, const  ::dgi::RequestDecodeFile& _file);
  int32_t send_decodeFileAsync(const  ::dgi::RequestDecodeFile& _file);
  void recv_decodeFileAsync( ::dgi::AsyncResponse& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
