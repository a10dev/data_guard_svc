/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DgiServiceManager_H
#define DgiServiceManager_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dgiServiceManager_types.h"

namespace dgi {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DgiServiceManagerIf {
 public:
  virtual ~DgiServiceManagerIf() {}
  virtual void run() = 0;
  virtual void stop() = 0;
  virtual void login( ::dgi::AuthResponse& _return, const std::string& _masterPassword) = 0;
  virtual void logout( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) = 0;
  virtual void changePassword( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword) = 0;
  virtual void isRightPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) = 0;
  virtual void isValidSession( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) = 0;
  virtual void isPasswordSet( ::dgi::BoolResponse& _return) = 0;
  virtual void setPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) = 0;
};

class DgiServiceManagerIfFactory {
 public:
  typedef DgiServiceManagerIf Handler;

  virtual ~DgiServiceManagerIfFactory() {}

  virtual DgiServiceManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DgiServiceManagerIf* /* handler */) = 0;
};

class DgiServiceManagerIfSingletonFactory : virtual public DgiServiceManagerIfFactory {
 public:
  DgiServiceManagerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf>& iface) : iface_(iface) {}
  virtual ~DgiServiceManagerIfSingletonFactory() {}

  virtual DgiServiceManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DgiServiceManagerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> iface_;
};

class DgiServiceManagerNull : virtual public DgiServiceManagerIf {
 public:
  virtual ~DgiServiceManagerNull() {}
  void run() {
    return;
  }
  void stop() {
    return;
  }
  void login( ::dgi::AuthResponse& /* _return */, const std::string& /* _masterPassword */) {
    return;
  }
  void logout( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */) {
    return;
  }
  void changePassword( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */, const std::string& /* _currentPassword */, const std::string& /* _newPassword */) {
    return;
  }
  void isRightPassword( ::dgi::DgiResult& /* _return */, const std::string& /* _masterPassword */) {
    return;
  }
  void isValidSession( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */) {
    return;
  }
  void isPasswordSet( ::dgi::BoolResponse& /* _return */) {
    return;
  }
  void setPassword( ::dgi::DgiResult& /* _return */, const std::string& /* _masterPassword */) {
    return;
  }
};


class DgiServiceManager_run_args {
 public:

  DgiServiceManager_run_args(const DgiServiceManager_run_args&);
  DgiServiceManager_run_args& operator=(const DgiServiceManager_run_args&);
  DgiServiceManager_run_args() {
  }

  virtual ~DgiServiceManager_run_args() throw();

  bool operator == (const DgiServiceManager_run_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DgiServiceManager_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_run_pargs {
 public:


  virtual ~DgiServiceManager_run_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_run_result {
 public:

  DgiServiceManager_run_result(const DgiServiceManager_run_result&);
  DgiServiceManager_run_result& operator=(const DgiServiceManager_run_result&);
  DgiServiceManager_run_result() {
  }

  virtual ~DgiServiceManager_run_result() throw();

  bool operator == (const DgiServiceManager_run_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DgiServiceManager_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_run_presult {
 public:


  virtual ~DgiServiceManager_run_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DgiServiceManager_stop_args {
 public:

  DgiServiceManager_stop_args(const DgiServiceManager_stop_args&);
  DgiServiceManager_stop_args& operator=(const DgiServiceManager_stop_args&);
  DgiServiceManager_stop_args() {
  }

  virtual ~DgiServiceManager_stop_args() throw();

  bool operator == (const DgiServiceManager_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DgiServiceManager_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_stop_pargs {
 public:


  virtual ~DgiServiceManager_stop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_stop_result {
 public:

  DgiServiceManager_stop_result(const DgiServiceManager_stop_result&);
  DgiServiceManager_stop_result& operator=(const DgiServiceManager_stop_result&);
  DgiServiceManager_stop_result() {
  }

  virtual ~DgiServiceManager_stop_result() throw();

  bool operator == (const DgiServiceManager_stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DgiServiceManager_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_stop_presult {
 public:


  virtual ~DgiServiceManager_stop_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_login_args__isset {
  _DgiServiceManager_login_args__isset() : _masterPassword(false) {}
  bool _masterPassword :1;
} _DgiServiceManager_login_args__isset;

class DgiServiceManager_login_args {
 public:

  DgiServiceManager_login_args(const DgiServiceManager_login_args&);
  DgiServiceManager_login_args& operator=(const DgiServiceManager_login_args&);
  DgiServiceManager_login_args() : _masterPassword() {
  }

  virtual ~DgiServiceManager_login_args() throw();
  std::string _masterPassword;

  _DgiServiceManager_login_args__isset __isset;

  void __set__masterPassword(const std::string& val);

  bool operator == (const DgiServiceManager_login_args & rhs) const
  {
    if (!(_masterPassword == rhs._masterPassword))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_login_pargs {
 public:


  virtual ~DgiServiceManager_login_pargs() throw();
  const std::string* _masterPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_login_result__isset {
  _DgiServiceManager_login_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_login_result__isset;

class DgiServiceManager_login_result {
 public:

  DgiServiceManager_login_result(const DgiServiceManager_login_result&);
  DgiServiceManager_login_result& operator=(const DgiServiceManager_login_result&);
  DgiServiceManager_login_result() {
  }

  virtual ~DgiServiceManager_login_result() throw();
   ::dgi::AuthResponse success;

  _DgiServiceManager_login_result__isset __isset;

  void __set_success(const  ::dgi::AuthResponse& val);

  bool operator == (const DgiServiceManager_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_login_presult__isset {
  _DgiServiceManager_login_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_login_presult__isset;

class DgiServiceManager_login_presult {
 public:


  virtual ~DgiServiceManager_login_presult() throw();
   ::dgi::AuthResponse* success;

  _DgiServiceManager_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_logout_args__isset {
  _DgiServiceManager_logout_args__isset() : _sid(false) {}
  bool _sid :1;
} _DgiServiceManager_logout_args__isset;

class DgiServiceManager_logout_args {
 public:

  DgiServiceManager_logout_args(const DgiServiceManager_logout_args&);
  DgiServiceManager_logout_args& operator=(const DgiServiceManager_logout_args&);
  DgiServiceManager_logout_args() : _sid() {
  }

  virtual ~DgiServiceManager_logout_args() throw();
   ::dgi::DgiSid _sid;

  _DgiServiceManager_logout_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  bool operator == (const DgiServiceManager_logout_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_logout_pargs {
 public:


  virtual ~DgiServiceManager_logout_pargs() throw();
  const  ::dgi::DgiSid* _sid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_logout_result__isset {
  _DgiServiceManager_logout_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_logout_result__isset;

class DgiServiceManager_logout_result {
 public:

  DgiServiceManager_logout_result(const DgiServiceManager_logout_result&);
  DgiServiceManager_logout_result& operator=(const DgiServiceManager_logout_result&);
  DgiServiceManager_logout_result() {
  }

  virtual ~DgiServiceManager_logout_result() throw();
   ::dgi::DgiResult success;

  _DgiServiceManager_logout_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiServiceManager_logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_logout_presult__isset {
  _DgiServiceManager_logout_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_logout_presult__isset;

class DgiServiceManager_logout_presult {
 public:


  virtual ~DgiServiceManager_logout_presult() throw();
   ::dgi::DgiResult* success;

  _DgiServiceManager_logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_changePassword_args__isset {
  _DgiServiceManager_changePassword_args__isset() : _sid(false), _currentPassword(false), _newPassword(false) {}
  bool _sid :1;
  bool _currentPassword :1;
  bool _newPassword :1;
} _DgiServiceManager_changePassword_args__isset;

class DgiServiceManager_changePassword_args {
 public:

  DgiServiceManager_changePassword_args(const DgiServiceManager_changePassword_args&);
  DgiServiceManager_changePassword_args& operator=(const DgiServiceManager_changePassword_args&);
  DgiServiceManager_changePassword_args() : _sid(), _currentPassword(), _newPassword() {
  }

  virtual ~DgiServiceManager_changePassword_args() throw();
   ::dgi::DgiSid _sid;
  std::string _currentPassword;
  std::string _newPassword;

  _DgiServiceManager_changePassword_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  void __set__currentPassword(const std::string& val);

  void __set__newPassword(const std::string& val);

  bool operator == (const DgiServiceManager_changePassword_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    if (!(_currentPassword == rhs._currentPassword))
      return false;
    if (!(_newPassword == rhs._newPassword))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_changePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_changePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_changePassword_pargs {
 public:


  virtual ~DgiServiceManager_changePassword_pargs() throw();
  const  ::dgi::DgiSid* _sid;
  const std::string* _currentPassword;
  const std::string* _newPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_changePassword_result__isset {
  _DgiServiceManager_changePassword_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_changePassword_result__isset;

class DgiServiceManager_changePassword_result {
 public:

  DgiServiceManager_changePassword_result(const DgiServiceManager_changePassword_result&);
  DgiServiceManager_changePassword_result& operator=(const DgiServiceManager_changePassword_result&);
  DgiServiceManager_changePassword_result() {
  }

  virtual ~DgiServiceManager_changePassword_result() throw();
   ::dgi::DgiResult success;

  _DgiServiceManager_changePassword_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiServiceManager_changePassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_changePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_changePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_changePassword_presult__isset {
  _DgiServiceManager_changePassword_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_changePassword_presult__isset;

class DgiServiceManager_changePassword_presult {
 public:


  virtual ~DgiServiceManager_changePassword_presult() throw();
   ::dgi::DgiResult* success;

  _DgiServiceManager_changePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_isRightPassword_args__isset {
  _DgiServiceManager_isRightPassword_args__isset() : _masterPassword(false) {}
  bool _masterPassword :1;
} _DgiServiceManager_isRightPassword_args__isset;

class DgiServiceManager_isRightPassword_args {
 public:

  DgiServiceManager_isRightPassword_args(const DgiServiceManager_isRightPassword_args&);
  DgiServiceManager_isRightPassword_args& operator=(const DgiServiceManager_isRightPassword_args&);
  DgiServiceManager_isRightPassword_args() : _masterPassword() {
  }

  virtual ~DgiServiceManager_isRightPassword_args() throw();
  std::string _masterPassword;

  _DgiServiceManager_isRightPassword_args__isset __isset;

  void __set__masterPassword(const std::string& val);

  bool operator == (const DgiServiceManager_isRightPassword_args & rhs) const
  {
    if (!(_masterPassword == rhs._masterPassword))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_isRightPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isRightPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_isRightPassword_pargs {
 public:


  virtual ~DgiServiceManager_isRightPassword_pargs() throw();
  const std::string* _masterPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isRightPassword_result__isset {
  _DgiServiceManager_isRightPassword_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isRightPassword_result__isset;

class DgiServiceManager_isRightPassword_result {
 public:

  DgiServiceManager_isRightPassword_result(const DgiServiceManager_isRightPassword_result&);
  DgiServiceManager_isRightPassword_result& operator=(const DgiServiceManager_isRightPassword_result&);
  DgiServiceManager_isRightPassword_result() {
  }

  virtual ~DgiServiceManager_isRightPassword_result() throw();
   ::dgi::DgiResult success;

  _DgiServiceManager_isRightPassword_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiServiceManager_isRightPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_isRightPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isRightPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isRightPassword_presult__isset {
  _DgiServiceManager_isRightPassword_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isRightPassword_presult__isset;

class DgiServiceManager_isRightPassword_presult {
 public:


  virtual ~DgiServiceManager_isRightPassword_presult() throw();
   ::dgi::DgiResult* success;

  _DgiServiceManager_isRightPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_isValidSession_args__isset {
  _DgiServiceManager_isValidSession_args__isset() : _sid(false) {}
  bool _sid :1;
} _DgiServiceManager_isValidSession_args__isset;

class DgiServiceManager_isValidSession_args {
 public:

  DgiServiceManager_isValidSession_args(const DgiServiceManager_isValidSession_args&);
  DgiServiceManager_isValidSession_args& operator=(const DgiServiceManager_isValidSession_args&);
  DgiServiceManager_isValidSession_args() : _sid() {
  }

  virtual ~DgiServiceManager_isValidSession_args() throw();
   ::dgi::DgiSid _sid;

  _DgiServiceManager_isValidSession_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  bool operator == (const DgiServiceManager_isValidSession_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_isValidSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isValidSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_isValidSession_pargs {
 public:


  virtual ~DgiServiceManager_isValidSession_pargs() throw();
  const  ::dgi::DgiSid* _sid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isValidSession_result__isset {
  _DgiServiceManager_isValidSession_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isValidSession_result__isset;

class DgiServiceManager_isValidSession_result {
 public:

  DgiServiceManager_isValidSession_result(const DgiServiceManager_isValidSession_result&);
  DgiServiceManager_isValidSession_result& operator=(const DgiServiceManager_isValidSession_result&);
  DgiServiceManager_isValidSession_result() {
  }

  virtual ~DgiServiceManager_isValidSession_result() throw();
   ::dgi::DgiResult success;

  _DgiServiceManager_isValidSession_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiServiceManager_isValidSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_isValidSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isValidSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isValidSession_presult__isset {
  _DgiServiceManager_isValidSession_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isValidSession_presult__isset;

class DgiServiceManager_isValidSession_presult {
 public:


  virtual ~DgiServiceManager_isValidSession_presult() throw();
   ::dgi::DgiResult* success;

  _DgiServiceManager_isValidSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DgiServiceManager_isPasswordSet_args {
 public:

  DgiServiceManager_isPasswordSet_args(const DgiServiceManager_isPasswordSet_args&);
  DgiServiceManager_isPasswordSet_args& operator=(const DgiServiceManager_isPasswordSet_args&);
  DgiServiceManager_isPasswordSet_args() {
  }

  virtual ~DgiServiceManager_isPasswordSet_args() throw();

  bool operator == (const DgiServiceManager_isPasswordSet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DgiServiceManager_isPasswordSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isPasswordSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_isPasswordSet_pargs {
 public:


  virtual ~DgiServiceManager_isPasswordSet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isPasswordSet_result__isset {
  _DgiServiceManager_isPasswordSet_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isPasswordSet_result__isset;

class DgiServiceManager_isPasswordSet_result {
 public:

  DgiServiceManager_isPasswordSet_result(const DgiServiceManager_isPasswordSet_result&);
  DgiServiceManager_isPasswordSet_result& operator=(const DgiServiceManager_isPasswordSet_result&);
  DgiServiceManager_isPasswordSet_result() {
  }

  virtual ~DgiServiceManager_isPasswordSet_result() throw();
   ::dgi::BoolResponse success;

  _DgiServiceManager_isPasswordSet_result__isset __isset;

  void __set_success(const  ::dgi::BoolResponse& val);

  bool operator == (const DgiServiceManager_isPasswordSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_isPasswordSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_isPasswordSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_isPasswordSet_presult__isset {
  _DgiServiceManager_isPasswordSet_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_isPasswordSet_presult__isset;

class DgiServiceManager_isPasswordSet_presult {
 public:


  virtual ~DgiServiceManager_isPasswordSet_presult() throw();
   ::dgi::BoolResponse* success;

  _DgiServiceManager_isPasswordSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiServiceManager_setPassword_args__isset {
  _DgiServiceManager_setPassword_args__isset() : _masterPassword(false) {}
  bool _masterPassword :1;
} _DgiServiceManager_setPassword_args__isset;

class DgiServiceManager_setPassword_args {
 public:

  DgiServiceManager_setPassword_args(const DgiServiceManager_setPassword_args&);
  DgiServiceManager_setPassword_args& operator=(const DgiServiceManager_setPassword_args&);
  DgiServiceManager_setPassword_args() : _masterPassword() {
  }

  virtual ~DgiServiceManager_setPassword_args() throw();
  std::string _masterPassword;

  _DgiServiceManager_setPassword_args__isset __isset;

  void __set__masterPassword(const std::string& val);

  bool operator == (const DgiServiceManager_setPassword_args & rhs) const
  {
    if (!(_masterPassword == rhs._masterPassword))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_setPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_setPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiServiceManager_setPassword_pargs {
 public:


  virtual ~DgiServiceManager_setPassword_pargs() throw();
  const std::string* _masterPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_setPassword_result__isset {
  _DgiServiceManager_setPassword_result__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_setPassword_result__isset;

class DgiServiceManager_setPassword_result {
 public:

  DgiServiceManager_setPassword_result(const DgiServiceManager_setPassword_result&);
  DgiServiceManager_setPassword_result& operator=(const DgiServiceManager_setPassword_result&);
  DgiServiceManager_setPassword_result() {
  }

  virtual ~DgiServiceManager_setPassword_result() throw();
   ::dgi::DgiResult success;

  _DgiServiceManager_setPassword_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiServiceManager_setPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiServiceManager_setPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiServiceManager_setPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiServiceManager_setPassword_presult__isset {
  _DgiServiceManager_setPassword_presult__isset() : success(false) {}
  bool success :1;
} _DgiServiceManager_setPassword_presult__isset;

class DgiServiceManager_setPassword_presult {
 public:


  virtual ~DgiServiceManager_setPassword_presult() throw();
   ::dgi::DgiResult* success;

  _DgiServiceManager_setPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DgiServiceManagerClient : virtual public DgiServiceManagerIf {
 public:
  DgiServiceManagerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiServiceManagerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void run();
  void send_run();
  void recv_run();
  void stop();
  void send_stop();
  void recv_stop();
  void login( ::dgi::AuthResponse& _return, const std::string& _masterPassword);
  void send_login(const std::string& _masterPassword);
  void recv_login( ::dgi::AuthResponse& _return);
  void logout( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid);
  void send_logout(const  ::dgi::DgiSid& _sid);
  void recv_logout( ::dgi::DgiResult& _return);
  void changePassword( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword);
  void send_changePassword(const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword);
  void recv_changePassword( ::dgi::DgiResult& _return);
  void isRightPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword);
  void send_isRightPassword(const std::string& _masterPassword);
  void recv_isRightPassword( ::dgi::DgiResult& _return);
  void isValidSession( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid);
  void send_isValidSession(const  ::dgi::DgiSid& _sid);
  void recv_isValidSession( ::dgi::DgiResult& _return);
  void isPasswordSet( ::dgi::BoolResponse& _return);
  void send_isPasswordSet();
  void recv_isPasswordSet( ::dgi::BoolResponse& _return);
  void setPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword);
  void send_setPassword(const std::string& _masterPassword);
  void recv_setPassword( ::dgi::DgiResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DgiServiceManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DgiServiceManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isRightPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isPasswordSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DgiServiceManagerProcessor(::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> iface) :
    iface_(iface) {
    processMap_["run"] = &DgiServiceManagerProcessor::process_run;
    processMap_["stop"] = &DgiServiceManagerProcessor::process_stop;
    processMap_["login"] = &DgiServiceManagerProcessor::process_login;
    processMap_["logout"] = &DgiServiceManagerProcessor::process_logout;
    processMap_["changePassword"] = &DgiServiceManagerProcessor::process_changePassword;
    processMap_["isRightPassword"] = &DgiServiceManagerProcessor::process_isRightPassword;
    processMap_["isValidSession"] = &DgiServiceManagerProcessor::process_isValidSession;
    processMap_["isPasswordSet"] = &DgiServiceManagerProcessor::process_isPasswordSet;
    processMap_["setPassword"] = &DgiServiceManagerProcessor::process_setPassword;
  }

  virtual ~DgiServiceManagerProcessor() {}
};

class DgiServiceManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DgiServiceManagerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DgiServiceManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DgiServiceManagerIfFactory > handlerFactory_;
};

class DgiServiceManagerMultiface : virtual public DgiServiceManagerIf {
 public:
  DgiServiceManagerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DgiServiceManagerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> > ifaces_;
  DgiServiceManagerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void run() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run();
    }
    ifaces_[i]->run();
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  void login( ::dgi::AuthResponse& _return, const std::string& _masterPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, _masterPassword);
    }
    ifaces_[i]->login(_return, _masterPassword);
    return;
  }

  void logout( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout(_return, _sid);
    }
    ifaces_[i]->logout(_return, _sid);
    return;
  }

  void changePassword( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changePassword(_return, _sid, _currentPassword, _newPassword);
    }
    ifaces_[i]->changePassword(_return, _sid, _currentPassword, _newPassword);
    return;
  }

  void isRightPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isRightPassword(_return, _masterPassword);
    }
    ifaces_[i]->isRightPassword(_return, _masterPassword);
    return;
  }

  void isValidSession( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidSession(_return, _sid);
    }
    ifaces_[i]->isValidSession(_return, _sid);
    return;
  }

  void isPasswordSet( ::dgi::BoolResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isPasswordSet(_return);
    }
    ifaces_[i]->isPasswordSet(_return);
    return;
  }

  void setPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPassword(_return, _masterPassword);
    }
    ifaces_[i]->setPassword(_return, _masterPassword);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DgiServiceManagerConcurrentClient : virtual public DgiServiceManagerIf {
 public:
  DgiServiceManagerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiServiceManagerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void run();
  int32_t send_run();
  void recv_run(const int32_t seqid);
  void stop();
  int32_t send_stop();
  void recv_stop(const int32_t seqid);
  void login( ::dgi::AuthResponse& _return, const std::string& _masterPassword);
  int32_t send_login(const std::string& _masterPassword);
  void recv_login( ::dgi::AuthResponse& _return, const int32_t seqid);
  void logout( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid);
  int32_t send_logout(const  ::dgi::DgiSid& _sid);
  void recv_logout( ::dgi::DgiResult& _return, const int32_t seqid);
  void changePassword( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword);
  int32_t send_changePassword(const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword);
  void recv_changePassword( ::dgi::DgiResult& _return, const int32_t seqid);
  void isRightPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword);
  int32_t send_isRightPassword(const std::string& _masterPassword);
  void recv_isRightPassword( ::dgi::DgiResult& _return, const int32_t seqid);
  void isValidSession( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid);
  int32_t send_isValidSession(const  ::dgi::DgiSid& _sid);
  void recv_isValidSession( ::dgi::DgiResult& _return, const int32_t seqid);
  void isPasswordSet( ::dgi::BoolResponse& _return);
  int32_t send_isPasswordSet();
  void recv_isPasswordSet( ::dgi::BoolResponse& _return, const int32_t seqid);
  void setPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword);
  int32_t send_setPassword(const std::string& _masterPassword);
  void recv_setPassword( ::dgi::DgiResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
