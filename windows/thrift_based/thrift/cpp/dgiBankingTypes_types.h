/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dgiBankingTypes_TYPES_H
#define dgiBankingTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "dgiCommonTypes_types.h"


namespace dgi {

typedef std::string CardNumber;

typedef std::vector<class BankCard>  BankCardList;

class ValidDate;

class BankCard;

class Resp_BankCard;

typedef struct _ValidDate__isset {
  _ValidDate__isset() : vd_month(false), vd_year(false) {}
  bool vd_month :1;
  bool vd_year :1;
} _ValidDate__isset;

class ValidDate : public virtual ::apache::thrift::TBase {
 public:

  ValidDate(const ValidDate&);
  ValidDate& operator=(const ValidDate&);
  ValidDate() : vd_month(0), vd_year(0) {
  }

  virtual ~ValidDate() throw();
  int32_t vd_month;
  int32_t vd_year;

  _ValidDate__isset __isset;

  void __set_vd_month(const int32_t val);

  void __set_vd_year(const int32_t val);

  bool operator == (const ValidDate & rhs) const
  {
    if (!(vd_month == rhs.vd_month))
      return false;
    if (!(vd_year == rhs.vd_year))
      return false;
    return true;
  }
  bool operator != (const ValidDate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValidDate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ValidDate &a, ValidDate &b);

std::ostream& operator<<(std::ostream& out, const ValidDate& obj);

typedef struct _BankCard__isset {
  _BankCard__isset() : shortDescription(false), bankOwner(false), paySystem(false), number(false), vd(false), pinCode(false), cvvCode(false), holder(false), name(false) {}
  bool shortDescription :1;
  bool bankOwner :1;
  bool paySystem :1;
  bool number :1;
  bool vd :1;
  bool pinCode :1;
  bool cvvCode :1;
  bool holder :1;
  bool name :1;
} _BankCard__isset;

class BankCard : public virtual ::apache::thrift::TBase {
 public:

  BankCard(const BankCard&);
  BankCard& operator=(const BankCard&);
  BankCard() : shortDescription(), bankOwner(), paySystem(), number(), pinCode(), cvvCode(), holder(), name() {
  }

  virtual ~BankCard() throw();
  std::string shortDescription;
  std::string bankOwner;
  std::string paySystem;
  CardNumber number;
  ValidDate vd;
  std::string pinCode;
  std::string cvvCode;
  std::string holder;
  std::string name;

  _BankCard__isset __isset;

  void __set_shortDescription(const std::string& val);

  void __set_bankOwner(const std::string& val);

  void __set_paySystem(const std::string& val);

  void __set_number(const CardNumber& val);

  void __set_vd(const ValidDate& val);

  void __set_pinCode(const std::string& val);

  void __set_cvvCode(const std::string& val);

  void __set_holder(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const BankCard & rhs) const
  {
    if (!(shortDescription == rhs.shortDescription))
      return false;
    if (!(bankOwner == rhs.bankOwner))
      return false;
    if (!(paySystem == rhs.paySystem))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(vd == rhs.vd))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(cvvCode == rhs.cvvCode))
      return false;
    if (!(holder == rhs.holder))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const BankCard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BankCard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BankCard &a, BankCard &b);

std::ostream& operator<<(std::ostream& out, const BankCard& obj);

typedef struct _Resp_BankCard__isset {
  _Resp_BankCard__isset() : result(false), cardInfo(false) {}
  bool result :1;
  bool cardInfo :1;
} _Resp_BankCard__isset;

class Resp_BankCard : public virtual ::apache::thrift::TBase {
 public:

  Resp_BankCard(const Resp_BankCard&);
  Resp_BankCard& operator=(const Resp_BankCard&);
  Resp_BankCard() {
  }

  virtual ~Resp_BankCard() throw();
   ::dgi::DgiResult result;
  BankCard cardInfo;

  _Resp_BankCard__isset __isset;

  void __set_result(const  ::dgi::DgiResult& val);

  void __set_cardInfo(const BankCard& val);

  bool operator == (const Resp_BankCard & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(cardInfo == rhs.cardInfo))
      return false;
    return true;
  }
  bool operator != (const Resp_BankCard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Resp_BankCard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Resp_BankCard &a, Resp_BankCard &b);

std::ostream& operator<<(std::ostream& out, const Resp_BankCard& obj);

} // namespace

#endif
