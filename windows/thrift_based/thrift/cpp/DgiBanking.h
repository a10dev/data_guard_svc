/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DgiBanking_H
#define DgiBanking_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dgiBanking_types.h"

namespace dgi {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DgiBankingIf {
 public:
  virtual ~DgiBankingIf() {}
  virtual void AddCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card) = 0;
  virtual void DeleteCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card) = 0;
  virtual void DeleteCardByNumber( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn) = 0;
  virtual void GetCards( ::dgi::BankCardList& _return, const  ::dgi::DgiSid& _sid) = 0;
  virtual void GetCard( ::dgi::Resp_BankCard& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber) = 0;
};

class DgiBankingIfFactory {
 public:
  typedef DgiBankingIf Handler;

  virtual ~DgiBankingIfFactory() {}

  virtual DgiBankingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DgiBankingIf* /* handler */) = 0;
};

class DgiBankingIfSingletonFactory : virtual public DgiBankingIfFactory {
 public:
  DgiBankingIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DgiBankingIf>& iface) : iface_(iface) {}
  virtual ~DgiBankingIfSingletonFactory() {}

  virtual DgiBankingIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DgiBankingIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiBankingIf> iface_;
};

class DgiBankingNull : virtual public DgiBankingIf {
 public:
  virtual ~DgiBankingNull() {}
  void AddCard( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */, const  ::dgi::BankCard& /* _card */) {
    return;
  }
  void DeleteCard( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */, const  ::dgi::BankCard& /* _card */) {
    return;
  }
  void DeleteCardByNumber( ::dgi::DgiResult& /* _return */, const  ::dgi::DgiSid& /* _sid */, const  ::dgi::CardNumber& /* _cn */) {
    return;
  }
  void GetCards( ::dgi::BankCardList& /* _return */, const  ::dgi::DgiSid& /* _sid */) {
    return;
  }
  void GetCard( ::dgi::Resp_BankCard& /* _return */, const  ::dgi::DgiSid& /* _sid */, const  ::dgi::CardNumber& /* _cardNumber */) {
    return;
  }
};

typedef struct _DgiBanking_AddCard_args__isset {
  _DgiBanking_AddCard_args__isset() : _sid(false), _card(false) {}
  bool _sid :1;
  bool _card :1;
} _DgiBanking_AddCard_args__isset;

class DgiBanking_AddCard_args {
 public:

  DgiBanking_AddCard_args(const DgiBanking_AddCard_args&);
  DgiBanking_AddCard_args& operator=(const DgiBanking_AddCard_args&);
  DgiBanking_AddCard_args() : _sid() {
  }

  virtual ~DgiBanking_AddCard_args() throw();
   ::dgi::DgiSid _sid;
   ::dgi::BankCard _card;

  _DgiBanking_AddCard_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  void __set__card(const  ::dgi::BankCard& val);

  bool operator == (const DgiBanking_AddCard_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    if (!(_card == rhs._card))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_AddCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_AddCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiBanking_AddCard_pargs {
 public:


  virtual ~DgiBanking_AddCard_pargs() throw();
  const  ::dgi::DgiSid* _sid;
  const  ::dgi::BankCard* _card;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_AddCard_result__isset {
  _DgiBanking_AddCard_result__isset() : success(false) {}
  bool success :1;
} _DgiBanking_AddCard_result__isset;

class DgiBanking_AddCard_result {
 public:

  DgiBanking_AddCard_result(const DgiBanking_AddCard_result&);
  DgiBanking_AddCard_result& operator=(const DgiBanking_AddCard_result&);
  DgiBanking_AddCard_result() {
  }

  virtual ~DgiBanking_AddCard_result() throw();
   ::dgi::DgiResult success;

  _DgiBanking_AddCard_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiBanking_AddCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_AddCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_AddCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_AddCard_presult__isset {
  _DgiBanking_AddCard_presult__isset() : success(false) {}
  bool success :1;
} _DgiBanking_AddCard_presult__isset;

class DgiBanking_AddCard_presult {
 public:


  virtual ~DgiBanking_AddCard_presult() throw();
   ::dgi::DgiResult* success;

  _DgiBanking_AddCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiBanking_DeleteCard_args__isset {
  _DgiBanking_DeleteCard_args__isset() : _sid(false), _card(false) {}
  bool _sid :1;
  bool _card :1;
} _DgiBanking_DeleteCard_args__isset;

class DgiBanking_DeleteCard_args {
 public:

  DgiBanking_DeleteCard_args(const DgiBanking_DeleteCard_args&);
  DgiBanking_DeleteCard_args& operator=(const DgiBanking_DeleteCard_args&);
  DgiBanking_DeleteCard_args() : _sid() {
  }

  virtual ~DgiBanking_DeleteCard_args() throw();
   ::dgi::DgiSid _sid;
   ::dgi::BankCard _card;

  _DgiBanking_DeleteCard_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  void __set__card(const  ::dgi::BankCard& val);

  bool operator == (const DgiBanking_DeleteCard_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    if (!(_card == rhs._card))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_DeleteCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_DeleteCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiBanking_DeleteCard_pargs {
 public:


  virtual ~DgiBanking_DeleteCard_pargs() throw();
  const  ::dgi::DgiSid* _sid;
  const  ::dgi::BankCard* _card;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_DeleteCard_result__isset {
  _DgiBanking_DeleteCard_result__isset() : success(false) {}
  bool success :1;
} _DgiBanking_DeleteCard_result__isset;

class DgiBanking_DeleteCard_result {
 public:

  DgiBanking_DeleteCard_result(const DgiBanking_DeleteCard_result&);
  DgiBanking_DeleteCard_result& operator=(const DgiBanking_DeleteCard_result&);
  DgiBanking_DeleteCard_result() {
  }

  virtual ~DgiBanking_DeleteCard_result() throw();
   ::dgi::DgiResult success;

  _DgiBanking_DeleteCard_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiBanking_DeleteCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_DeleteCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_DeleteCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_DeleteCard_presult__isset {
  _DgiBanking_DeleteCard_presult__isset() : success(false) {}
  bool success :1;
} _DgiBanking_DeleteCard_presult__isset;

class DgiBanking_DeleteCard_presult {
 public:


  virtual ~DgiBanking_DeleteCard_presult() throw();
   ::dgi::DgiResult* success;

  _DgiBanking_DeleteCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiBanking_DeleteCardByNumber_args__isset {
  _DgiBanking_DeleteCardByNumber_args__isset() : _sid(false), _cn(false) {}
  bool _sid :1;
  bool _cn :1;
} _DgiBanking_DeleteCardByNumber_args__isset;

class DgiBanking_DeleteCardByNumber_args {
 public:

  DgiBanking_DeleteCardByNumber_args(const DgiBanking_DeleteCardByNumber_args&);
  DgiBanking_DeleteCardByNumber_args& operator=(const DgiBanking_DeleteCardByNumber_args&);
  DgiBanking_DeleteCardByNumber_args() : _sid(), _cn() {
  }

  virtual ~DgiBanking_DeleteCardByNumber_args() throw();
   ::dgi::DgiSid _sid;
   ::dgi::CardNumber _cn;

  _DgiBanking_DeleteCardByNumber_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  void __set__cn(const  ::dgi::CardNumber& val);

  bool operator == (const DgiBanking_DeleteCardByNumber_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    if (!(_cn == rhs._cn))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_DeleteCardByNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_DeleteCardByNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiBanking_DeleteCardByNumber_pargs {
 public:


  virtual ~DgiBanking_DeleteCardByNumber_pargs() throw();
  const  ::dgi::DgiSid* _sid;
  const  ::dgi::CardNumber* _cn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_DeleteCardByNumber_result__isset {
  _DgiBanking_DeleteCardByNumber_result__isset() : success(false) {}
  bool success :1;
} _DgiBanking_DeleteCardByNumber_result__isset;

class DgiBanking_DeleteCardByNumber_result {
 public:

  DgiBanking_DeleteCardByNumber_result(const DgiBanking_DeleteCardByNumber_result&);
  DgiBanking_DeleteCardByNumber_result& operator=(const DgiBanking_DeleteCardByNumber_result&);
  DgiBanking_DeleteCardByNumber_result() {
  }

  virtual ~DgiBanking_DeleteCardByNumber_result() throw();
   ::dgi::DgiResult success;

  _DgiBanking_DeleteCardByNumber_result__isset __isset;

  void __set_success(const  ::dgi::DgiResult& val);

  bool operator == (const DgiBanking_DeleteCardByNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_DeleteCardByNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_DeleteCardByNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_DeleteCardByNumber_presult__isset {
  _DgiBanking_DeleteCardByNumber_presult__isset() : success(false) {}
  bool success :1;
} _DgiBanking_DeleteCardByNumber_presult__isset;

class DgiBanking_DeleteCardByNumber_presult {
 public:


  virtual ~DgiBanking_DeleteCardByNumber_presult() throw();
   ::dgi::DgiResult* success;

  _DgiBanking_DeleteCardByNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiBanking_GetCards_args__isset {
  _DgiBanking_GetCards_args__isset() : _sid(false) {}
  bool _sid :1;
} _DgiBanking_GetCards_args__isset;

class DgiBanking_GetCards_args {
 public:

  DgiBanking_GetCards_args(const DgiBanking_GetCards_args&);
  DgiBanking_GetCards_args& operator=(const DgiBanking_GetCards_args&);
  DgiBanking_GetCards_args() : _sid() {
  }

  virtual ~DgiBanking_GetCards_args() throw();
   ::dgi::DgiSid _sid;

  _DgiBanking_GetCards_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  bool operator == (const DgiBanking_GetCards_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_GetCards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_GetCards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiBanking_GetCards_pargs {
 public:


  virtual ~DgiBanking_GetCards_pargs() throw();
  const  ::dgi::DgiSid* _sid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_GetCards_result__isset {
  _DgiBanking_GetCards_result__isset() : success(false) {}
  bool success :1;
} _DgiBanking_GetCards_result__isset;

class DgiBanking_GetCards_result {
 public:

  DgiBanking_GetCards_result(const DgiBanking_GetCards_result&);
  DgiBanking_GetCards_result& operator=(const DgiBanking_GetCards_result&);
  DgiBanking_GetCards_result() {
  }

  virtual ~DgiBanking_GetCards_result() throw();
   ::dgi::BankCardList success;

  _DgiBanking_GetCards_result__isset __isset;

  void __set_success(const  ::dgi::BankCardList& val);

  bool operator == (const DgiBanking_GetCards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_GetCards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_GetCards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_GetCards_presult__isset {
  _DgiBanking_GetCards_presult__isset() : success(false) {}
  bool success :1;
} _DgiBanking_GetCards_presult__isset;

class DgiBanking_GetCards_presult {
 public:


  virtual ~DgiBanking_GetCards_presult() throw();
   ::dgi::BankCardList* success;

  _DgiBanking_GetCards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DgiBanking_GetCard_args__isset {
  _DgiBanking_GetCard_args__isset() : _sid(false), _cardNumber(false) {}
  bool _sid :1;
  bool _cardNumber :1;
} _DgiBanking_GetCard_args__isset;

class DgiBanking_GetCard_args {
 public:

  DgiBanking_GetCard_args(const DgiBanking_GetCard_args&);
  DgiBanking_GetCard_args& operator=(const DgiBanking_GetCard_args&);
  DgiBanking_GetCard_args() : _sid(), _cardNumber() {
  }

  virtual ~DgiBanking_GetCard_args() throw();
   ::dgi::DgiSid _sid;
   ::dgi::CardNumber _cardNumber;

  _DgiBanking_GetCard_args__isset __isset;

  void __set__sid(const  ::dgi::DgiSid& val);

  void __set__cardNumber(const  ::dgi::CardNumber& val);

  bool operator == (const DgiBanking_GetCard_args & rhs) const
  {
    if (!(_sid == rhs._sid))
      return false;
    if (!(_cardNumber == rhs._cardNumber))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_GetCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_GetCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DgiBanking_GetCard_pargs {
 public:


  virtual ~DgiBanking_GetCard_pargs() throw();
  const  ::dgi::DgiSid* _sid;
  const  ::dgi::CardNumber* _cardNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_GetCard_result__isset {
  _DgiBanking_GetCard_result__isset() : success(false) {}
  bool success :1;
} _DgiBanking_GetCard_result__isset;

class DgiBanking_GetCard_result {
 public:

  DgiBanking_GetCard_result(const DgiBanking_GetCard_result&);
  DgiBanking_GetCard_result& operator=(const DgiBanking_GetCard_result&);
  DgiBanking_GetCard_result() {
  }

  virtual ~DgiBanking_GetCard_result() throw();
   ::dgi::Resp_BankCard success;

  _DgiBanking_GetCard_result__isset __isset;

  void __set_success(const  ::dgi::Resp_BankCard& val);

  bool operator == (const DgiBanking_GetCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DgiBanking_GetCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DgiBanking_GetCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DgiBanking_GetCard_presult__isset {
  _DgiBanking_GetCard_presult__isset() : success(false) {}
  bool success :1;
} _DgiBanking_GetCard_presult__isset;

class DgiBanking_GetCard_presult {
 public:


  virtual ~DgiBanking_GetCard_presult() throw();
   ::dgi::Resp_BankCard* success;

  _DgiBanking_GetCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DgiBankingClient : virtual public DgiBankingIf {
 public:
  DgiBankingClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiBankingClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void send_AddCard(const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void recv_AddCard( ::dgi::DgiResult& _return);
  void DeleteCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void send_DeleteCard(const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void recv_DeleteCard( ::dgi::DgiResult& _return);
  void DeleteCardByNumber( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn);
  void send_DeleteCardByNumber(const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn);
  void recv_DeleteCardByNumber( ::dgi::DgiResult& _return);
  void GetCards( ::dgi::BankCardList& _return, const  ::dgi::DgiSid& _sid);
  void send_GetCards(const  ::dgi::DgiSid& _sid);
  void recv_GetCards( ::dgi::BankCardList& _return);
  void GetCard( ::dgi::Resp_BankCard& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber);
  void send_GetCard(const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber);
  void recv_GetCard( ::dgi::Resp_BankCard& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DgiBankingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DgiBankingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DgiBankingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteCardByNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DgiBankingProcessor(::apache::thrift::stdcxx::shared_ptr<DgiBankingIf> iface) :
    iface_(iface) {
    processMap_["AddCard"] = &DgiBankingProcessor::process_AddCard;
    processMap_["DeleteCard"] = &DgiBankingProcessor::process_DeleteCard;
    processMap_["DeleteCardByNumber"] = &DgiBankingProcessor::process_DeleteCardByNumber;
    processMap_["GetCards"] = &DgiBankingProcessor::process_GetCards;
    processMap_["GetCard"] = &DgiBankingProcessor::process_GetCard;
  }

  virtual ~DgiBankingProcessor() {}
};

class DgiBankingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DgiBankingProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DgiBankingIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DgiBankingIfFactory > handlerFactory_;
};

class DgiBankingMultiface : virtual public DgiBankingIf {
 public:
  DgiBankingMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DgiBankingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DgiBankingMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DgiBankingIf> > ifaces_;
  DgiBankingMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DgiBankingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AddCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddCard(_return, _sid, _card);
    }
    ifaces_[i]->AddCard(_return, _sid, _card);
    return;
  }

  void DeleteCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteCard(_return, _sid, _card);
    }
    ifaces_[i]->DeleteCard(_return, _sid, _card);
    return;
  }

  void DeleteCardByNumber( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteCardByNumber(_return, _sid, _cn);
    }
    ifaces_[i]->DeleteCardByNumber(_return, _sid, _cn);
    return;
  }

  void GetCards( ::dgi::BankCardList& _return, const  ::dgi::DgiSid& _sid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCards(_return, _sid);
    }
    ifaces_[i]->GetCards(_return, _sid);
    return;
  }

  void GetCard( ::dgi::Resp_BankCard& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCard(_return, _sid, _cardNumber);
    }
    ifaces_[i]->GetCard(_return, _sid, _cardNumber);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DgiBankingConcurrentClient : virtual public DgiBankingIf {
 public:
  DgiBankingConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DgiBankingConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  int32_t send_AddCard(const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void recv_AddCard( ::dgi::DgiResult& _return, const int32_t seqid);
  void DeleteCard( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  int32_t send_DeleteCard(const  ::dgi::DgiSid& _sid, const  ::dgi::BankCard& _card);
  void recv_DeleteCard( ::dgi::DgiResult& _return, const int32_t seqid);
  void DeleteCardByNumber( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn);
  int32_t send_DeleteCardByNumber(const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cn);
  void recv_DeleteCardByNumber( ::dgi::DgiResult& _return, const int32_t seqid);
  void GetCards( ::dgi::BankCardList& _return, const  ::dgi::DgiSid& _sid);
  int32_t send_GetCards(const  ::dgi::DgiSid& _sid);
  void recv_GetCards( ::dgi::BankCardList& _return, const int32_t seqid);
  void GetCard( ::dgi::Resp_BankCard& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber);
  int32_t send_GetCard(const  ::dgi::DgiSid& _sid, const  ::dgi::CardNumber& _cardNumber);
  void recv_GetCard( ::dgi::Resp_BankCard& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
