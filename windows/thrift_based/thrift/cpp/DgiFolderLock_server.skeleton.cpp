// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DgiFolderLock.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::dgi;

class DgiFolderLockHandler : virtual public DgiFolderLockIf {
 public:
  DgiFolderLockHandler() {
    // Your initialization goes here
  }

  void getSubsState( ::dgi::SubSystemStateResponse& _return) {
    // Your implementation goes here
    printf("getSubsState\n");
  }

  void isSupportedFs( ::dgi::BoolResponse& _return, const std::string& _path) {
    // Your implementation goes here
    printf("isSupportedFs\n");
  }

   ::dgi::DgiStatus::type add(const  ::dgi::DgiSid& _sid, const  ::dgi::FLockInfo& _flock) {
    // Your implementation goes here
    printf("add\n");
  }

  void getFlocks( ::dgi::FLockListResponse& _return, const  ::dgi::DgiSid& _sid) {
    // Your implementation goes here
    printf("getFlocks\n");
  }

  void getState( ::dgi::FLockStateResponse& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::utf8string& _flockPath) {
    // Your implementation goes here
    printf("getState\n");
  }

  void setState( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::utf8string& _flockPath, const  ::dgi::FLockState::type _newState) {
    // Your implementation goes here
    printf("setState\n");
  }

  void present( ::dgi::BoolResponse& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::utf8string& _flockPath) {
    // Your implementation goes here
    printf("present\n");
  }

  void presentById( ::dgi::BoolResponse& _return, const  ::dgi::DgiSid& _sid, const std::string& _flockId) {
    // Your implementation goes here
    printf("presentById\n");
  }

  void remove( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const  ::dgi::utf8string& _flockPath) {
    // Your implementation goes here
    printf("remove\n");
  }

  void removeAll( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) {
    // Your implementation goes here
    printf("removeAll\n");
  }

  void getCacheInfo( ::dgi::FLockCacheInfo& _return) {
    // Your implementation goes here
    printf("getCacheInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<DgiFolderLockHandler> handler(new DgiFolderLockHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new DgiFolderLockProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

