// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DgiServiceManager.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::dgi;

class DgiServiceManagerHandler : virtual public DgiServiceManagerIf {
 public:
  DgiServiceManagerHandler() {
    // Your initialization goes here
  }

  void run() {
    // Your implementation goes here
    printf("run\n");
  }

  void stop() {
    // Your implementation goes here
    printf("stop\n");
  }

  void login( ::dgi::AuthResponse& _return, const std::string& _masterPassword) {
    // Your implementation goes here
    printf("login\n");
  }

  void logout( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) {
    // Your implementation goes here
    printf("logout\n");
  }

  void changePassword( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid, const std::string& _currentPassword, const std::string& _newPassword) {
    // Your implementation goes here
    printf("changePassword\n");
  }

  void isRightPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) {
    // Your implementation goes here
    printf("isRightPassword\n");
  }

  void isValidSession( ::dgi::DgiResult& _return, const  ::dgi::DgiSid& _sid) {
    // Your implementation goes here
    printf("isValidSession\n");
  }

  void isPasswordSet( ::dgi::BoolResponse& _return) {
    // Your implementation goes here
    printf("isPasswordSet\n");
  }

  void setPassword( ::dgi::DgiResult& _return, const std::string& _masterPassword) {
    // Your implementation goes here
    printf("setPassword\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<DgiServiceManagerHandler> handler(new DgiServiceManagerHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new DgiServiceManagerProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

