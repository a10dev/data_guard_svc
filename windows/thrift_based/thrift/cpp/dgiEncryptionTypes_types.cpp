/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dgiEncryptionTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dgi {

int _kHashAlgTypeValues[] = {
  HashAlgType::HAlg_Unknown,
  HashAlgType::HAlg_Crc32,
  HashAlgType::HAlg_Md5,
  HashAlgType::HAlg_Sha1,
  HashAlgType::HAlg_Sha256,
  HashAlgType::HAlg_Sha512,
  HashAlgType::HAlg_Whirepool
};
const char* _kHashAlgTypeNames[] = {
  "HAlg_Unknown",
  "HAlg_Crc32",
  "HAlg_Md5",
  "HAlg_Sha1",
  "HAlg_Sha256",
  "HAlg_Sha512",
  "HAlg_Whirepool"
};
const std::map<int, const char*> _HashAlgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kHashAlgTypeValues, _kHashAlgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const HashAlgType::type& val) {
  std::map<int, const char*>::const_iterator it = _HashAlgType_VALUES_TO_NAMES.find(val);
  if (it != _HashAlgType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEncryptionAlgTypeValues[] = {
  EncryptionAlgType::EAlg_Unknown,
  EncryptionAlgType::EAlg_Grader,
  EncryptionAlgType::EAlg_Aes,
  EncryptionAlgType::EAlg_Aes256
};
const char* _kEncryptionAlgTypeNames[] = {
  "EAlg_Unknown",
  "EAlg_Grader",
  "EAlg_Aes",
  "EAlg_Aes256"
};
const std::map<int, const char*> _EncryptionAlgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kEncryptionAlgTypeValues, _kEncryptionAlgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EncryptionAlgType::type& val) {
  std::map<int, const char*>::const_iterator it = _EncryptionAlgType_VALUES_TO_NAMES.find(val);
  if (it != _EncryptionAlgType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RequestEncryptFile::~RequestEncryptFile() throw() {
}


void RequestEncryptFile::__set_filePath(const std::string& val) {
  this->filePath = val;
}

void RequestEncryptFile::__set_useMasterPassword(const bool val) {
  this->useMasterPassword = val;
}

void RequestEncryptFile::__set_encryptionKey(const std::string& val) {
  this->encryptionKey = val;
}

void RequestEncryptFile::__set_encodingAlgorithm(const EncryptionAlgType::type val) {
  this->encodingAlgorithm = val;
}
std::ostream& operator<<(std::ostream& out, const RequestEncryptFile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RequestEncryptFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useMasterPassword);
          this->__isset.useMasterPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptionKey);
          this->__isset.encryptionKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->encodingAlgorithm = (EncryptionAlgType::type)ecast0;
          this->__isset.encodingAlgorithm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestEncryptFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestEncryptFile");

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("useMasterPassword", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->useMasterPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptionKey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptionKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encodingAlgorithm", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->encodingAlgorithm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestEncryptFile &a, RequestEncryptFile &b) {
  using ::std::swap;
  swap(a.filePath, b.filePath);
  swap(a.useMasterPassword, b.useMasterPassword);
  swap(a.encryptionKey, b.encryptionKey);
  swap(a.encodingAlgorithm, b.encodingAlgorithm);
  swap(a.__isset, b.__isset);
}

RequestEncryptFile::RequestEncryptFile(const RequestEncryptFile& other1) {
  filePath = other1.filePath;
  useMasterPassword = other1.useMasterPassword;
  encryptionKey = other1.encryptionKey;
  encodingAlgorithm = other1.encodingAlgorithm;
  __isset = other1.__isset;
}
RequestEncryptFile& RequestEncryptFile::operator=(const RequestEncryptFile& other2) {
  filePath = other2.filePath;
  useMasterPassword = other2.useMasterPassword;
  encryptionKey = other2.encryptionKey;
  encodingAlgorithm = other2.encodingAlgorithm;
  __isset = other2.__isset;
  return *this;
}
void RequestEncryptFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestEncryptFile(";
  out << "filePath=" << to_string(filePath);
  out << ", " << "useMasterPassword=" << to_string(useMasterPassword);
  out << ", " << "encryptionKey=" << to_string(encryptionKey);
  out << ", " << "encodingAlgorithm=" << to_string(encodingAlgorithm);
  out << ")";
}


EncryptionFileInfo::~EncryptionFileInfo() throw() {
}


void EncryptionFileInfo::__set_usedMasterPassword(const bool val) {
  this->usedMasterPassword = val;
}

void EncryptionFileInfo::__set_encodingAlgorithm(const EncryptionAlgType::type val) {
  this->encodingAlgorithm = val;
}

void EncryptionFileInfo::__set_originalFileSize(const int64_t val) {
  this->originalFileSize = val;
}

void EncryptionFileInfo::__set_originalChecksum(const std::string& val) {
  this->originalChecksum = val;
}

void EncryptionFileInfo::__set_keyChecksum(const std::string& val) {
  this->keyChecksum = val;
}
std::ostream& operator<<(std::ostream& out, const EncryptionFileInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EncryptionFileInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usedMasterPassword);
          this->__isset.usedMasterPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->encodingAlgorithm = (EncryptionAlgType::type)ecast3;
          this->__isset.encodingAlgorithm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->originalFileSize);
          this->__isset.originalFileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->originalChecksum);
          this->__isset.originalChecksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyChecksum);
          this->__isset.keyChecksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EncryptionFileInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EncryptionFileInfo");

  xfer += oprot->writeFieldBegin("usedMasterPassword", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->usedMasterPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encodingAlgorithm", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->encodingAlgorithm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalFileSize", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->originalFileSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originalChecksum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->originalChecksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyChecksum", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->keyChecksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EncryptionFileInfo &a, EncryptionFileInfo &b) {
  using ::std::swap;
  swap(a.usedMasterPassword, b.usedMasterPassword);
  swap(a.encodingAlgorithm, b.encodingAlgorithm);
  swap(a.originalFileSize, b.originalFileSize);
  swap(a.originalChecksum, b.originalChecksum);
  swap(a.keyChecksum, b.keyChecksum);
  swap(a.__isset, b.__isset);
}

EncryptionFileInfo::EncryptionFileInfo(const EncryptionFileInfo& other4) {
  usedMasterPassword = other4.usedMasterPassword;
  encodingAlgorithm = other4.encodingAlgorithm;
  originalFileSize = other4.originalFileSize;
  originalChecksum = other4.originalChecksum;
  keyChecksum = other4.keyChecksum;
  __isset = other4.__isset;
}
EncryptionFileInfo& EncryptionFileInfo::operator=(const EncryptionFileInfo& other5) {
  usedMasterPassword = other5.usedMasterPassword;
  encodingAlgorithm = other5.encodingAlgorithm;
  originalFileSize = other5.originalFileSize;
  originalChecksum = other5.originalChecksum;
  keyChecksum = other5.keyChecksum;
  __isset = other5.__isset;
  return *this;
}
void EncryptionFileInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EncryptionFileInfo(";
  out << "usedMasterPassword=" << to_string(usedMasterPassword);
  out << ", " << "encodingAlgorithm=" << to_string(encodingAlgorithm);
  out << ", " << "originalFileSize=" << to_string(originalFileSize);
  out << ", " << "originalChecksum=" << to_string(originalChecksum);
  out << ", " << "keyChecksum=" << to_string(keyChecksum);
  out << ")";
}


ResponseFileInfo::~ResponseFileInfo() throw() {
}


void ResponseFileInfo::__set_encryptedAlready(const bool val) {
  this->encryptedAlready = val;
}

void ResponseFileInfo::__set_info(const EncryptionFileInfo& val) {
  this->info = val;
}

void ResponseFileInfo::__set_result(const  ::dgi::DgiResult& val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const ResponseFileInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ResponseFileInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->encryptedAlready);
          this->__isset.encryptedAlready = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->info.read(iprot);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResponseFileInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResponseFileInfo");

  xfer += oprot->writeFieldBegin("encryptedAlready", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->encryptedAlready);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResponseFileInfo &a, ResponseFileInfo &b) {
  using ::std::swap;
  swap(a.encryptedAlready, b.encryptedAlready);
  swap(a.info, b.info);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

ResponseFileInfo::ResponseFileInfo(const ResponseFileInfo& other6) {
  encryptedAlready = other6.encryptedAlready;
  info = other6.info;
  result = other6.result;
  __isset = other6.__isset;
}
ResponseFileInfo& ResponseFileInfo::operator=(const ResponseFileInfo& other7) {
  encryptedAlready = other7.encryptedAlready;
  info = other7.info;
  result = other7.result;
  __isset = other7.__isset;
  return *this;
}
void ResponseFileInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResponseFileInfo(";
  out << "encryptedAlready=" << to_string(encryptedAlready);
  out << ", " << "info=" << to_string(info);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


RequestDecodeFile::~RequestDecodeFile() throw() {
}


void RequestDecodeFile::__set_filePath(const std::string& val) {
  this->filePath = val;
}

void RequestDecodeFile::__set_useMasterPassword(const bool val) {
  this->useMasterPassword = val;
}

void RequestDecodeFile::__set_encryptionKey(const std::string& val) {
  this->encryptionKey = val;
}
std::ostream& operator<<(std::ostream& out, const RequestDecodeFile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RequestDecodeFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useMasterPassword);
          this->__isset.useMasterPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptionKey);
          this->__isset.encryptionKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestDecodeFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestDecodeFile");

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("useMasterPassword", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->useMasterPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptionKey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptionKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestDecodeFile &a, RequestDecodeFile &b) {
  using ::std::swap;
  swap(a.filePath, b.filePath);
  swap(a.useMasterPassword, b.useMasterPassword);
  swap(a.encryptionKey, b.encryptionKey);
  swap(a.__isset, b.__isset);
}

RequestDecodeFile::RequestDecodeFile(const RequestDecodeFile& other8) {
  filePath = other8.filePath;
  useMasterPassword = other8.useMasterPassword;
  encryptionKey = other8.encryptionKey;
  __isset = other8.__isset;
}
RequestDecodeFile& RequestDecodeFile::operator=(const RequestDecodeFile& other9) {
  filePath = other9.filePath;
  useMasterPassword = other9.useMasterPassword;
  encryptionKey = other9.encryptionKey;
  __isset = other9.__isset;
  return *this;
}
void RequestDecodeFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestDecodeFile(";
  out << "filePath=" << to_string(filePath);
  out << ", " << "useMasterPassword=" << to_string(useMasterPassword);
  out << ", " << "encryptionKey=" << to_string(encryptionKey);
  out << ")";
}


ResponseDecodeFile::~ResponseDecodeFile() throw() {
}


void ResponseDecodeFile::__set_result(const  ::dgi::DgiResult& val) {
  this->result = val;
}

void ResponseDecodeFile::__set_integrityCompromised(const bool val) {
  this->integrityCompromised = val;
}
std::ostream& operator<<(std::ostream& out, const ResponseDecodeFile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ResponseDecodeFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->integrityCompromised);
          this->__isset.integrityCompromised = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResponseDecodeFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResponseDecodeFile");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("integrityCompromised", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->integrityCompromised);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResponseDecodeFile &a, ResponseDecodeFile &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.integrityCompromised, b.integrityCompromised);
  swap(a.__isset, b.__isset);
}

ResponseDecodeFile::ResponseDecodeFile(const ResponseDecodeFile& other10) {
  result = other10.result;
  integrityCompromised = other10.integrityCompromised;
  __isset = other10.__isset;
}
ResponseDecodeFile& ResponseDecodeFile::operator=(const ResponseDecodeFile& other11) {
  result = other11.result;
  integrityCompromised = other11.integrityCompromised;
  __isset = other11.__isset;
  return *this;
}
void ResponseDecodeFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResponseDecodeFile(";
  out << "result=" << to_string(result);
  out << ", " << "integrityCompromised=" << to_string(integrityCompromised);
  out << ")";
}

} // namespace
